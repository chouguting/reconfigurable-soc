
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_CV(
	input			logic [15:0]	a,
	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,
	input 		          		RESET_N,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// microSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DATA,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



	//=======================================================
	//  REG/WIRE declarations
	//=======================================================
	logic sig_filter;
	logic SIGNAL;
	logic synr_enc, synr_enc_pos;
	logic[31:0] encoder_count;
	logic step_dist;


	assign SIGNAL = SW[0];


	//=======================================================
	//  Structural coding
	//=======================================================




	Low_Pass_Filter_4ENC lpf(
		.sig_filter(synr_enc),	
		.signal(SIGNAL),	
		.r_LPF_threshold_enc(14'd200),  //	Unit : 0.08us  /// 2^3 = 8,  r_LPF_threshold_enc=0 => By Pass
		.clk(CLOCK_50), 
		.reset(RESET_N));

	POS_EDGE_DETECTOR ped(
	   	.clk(CLOCK_50), // clock input
	   	.reset(RESET_N), // reset input
	   	.detect_signal(synr_enc), // input signal
	   	.edge_detected(synr_enc_pos)
	);

	ENCODER_PERIOD ep1(
		.system_clk(CLOCK_50),
		.reset(RESET_N),
		.count_signal(synr_enc_pos),
 		.encoder_count(encoder_count)
	);

	ENCODER_MEASURE em1(
		.system_clk(CLOCK_50),
    	.reset(RESET_N),
    	.encoder_count_measure(encoder_count),
    	.r_distance(a), // 170*0.08us = 13.6us
    	.step_dist(step_dist) 
	);





	
	

endmodule
